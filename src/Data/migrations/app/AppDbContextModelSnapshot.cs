// <auto-generated />
using System;
using Data.App.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.migrations.app
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.App.Models.Activities.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("ActivityEntityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Data.App.Models.Breedings.Breeding", b =>
                {
                    b.Property<string>("BreedingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Alive")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BreedingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("BreedingSuccessful")
                        .HasColumnType("bit");

                    b.Property<int>("Bucks")
                        .HasColumnType("int");

                    b.Property<string>("CageId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Dead")
                        .HasColumnType("int");

                    b.Property<int>("Does")
                        .HasColumnType("int");

                    b.Property<string>("FarmId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Notes")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeasonId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("BreedingId");

                    b.HasIndex("CageId");

                    b.HasIndex("FarmId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Breeding");
                });

            modelBuilder.Entity("Data.App.Models.Breedings.BreedingMortality", b =>
                {
                    b.Property<string>("BreedingMortalityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BreedingId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<int>("MortalityType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BreedingMortalityId");

                    b.HasIndex("BreedingId");

                    b.ToTable("BreedingMortality");
                });

            modelBuilder.Entity("Data.App.Models.Breedings.BreedingParent", b =>
                {
                    b.Property<string>("BreedingParentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BreedingId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("RabbitGender")
                        .HasColumnType("int");

                    b.Property<string>("RabbitId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("BreedingParentId");

                    b.HasIndex("RabbitId");

                    b.HasIndex("BreedingId", "RabbitId")
                        .IsUnique();

                    b.ToTable("BreedingParent");
                });

            modelBuilder.Entity("Data.App.Models.Cages.Cage", b =>
                {
                    b.Property<string>("CageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("FarmId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CageId");

                    b.HasIndex("FarmId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cage");
                });

            modelBuilder.Entity("Data.App.Models.Calendars.Calendar", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("DayOfYear")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Date");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("Data.App.Models.Chats.Chat", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LastChatMessageId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ChatId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatMessage", b =>
                {
                    b.Property<string>("ChatMessageId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("ChatMessageType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastChatMessageId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ChatReceiverId");

                    b.HasIndex("ChatId");

                    b.HasIndex("LastChatMessageId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("ChatReceiver");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.Contact", b =>
                {
                    b.Property<string>("ContactId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AlcoholDrinker")
                        .HasColumnType("bit");

                    b.Property<decimal>("AnnualRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssignedToId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CivilStatus")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedById")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfInitialContact")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GSIS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("GeoX")
                        .HasColumnType("float");

                    b.Property<double>("GeoY")
                        .HasColumnType("float");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReferralSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salutation")
                        .HasColumnType("int");

                    b.Property<bool>("Smoker")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactActivity", b =>
                {
                    b.Property<string>("ContactId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ActivityId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ContactId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ContactActivity");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactAttachment", b =>
                {
                    b.Property<string>("ContactAttachmentId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUploadId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Title")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("ContactAttachmentId");

                    b.HasIndex("ContactId");

                    b.HasIndex("FileUploadId");

                    b.ToTable("ContactAttachment");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactAttachmentAudit", b =>
                {
                    b.Property<string>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<int>("AuditAction")
                        .HasColumnType("int");

                    b.Property<string>("AuditUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLog")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("FileUploadId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EntityId");

                    b.HasIndex("FileUploadId");

                    b.ToTable("ContactAttachmentAudit");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactAudit", b =>
                {
                    b.Property<string>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AlcoholDrinker")
                        .HasColumnType("bit");

                    b.Property<decimal>("AnnualRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssignedToId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AuditAction")
                        .HasColumnType("int");

                    b.Property<string>("AuditUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CivilStatus")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLog")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfInitialContact")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GSIS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("GeoX")
                        .HasColumnType("float");

                    b.Property<double>("GeoY")
                        .HasColumnType("float");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReferralSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salutation")
                        .HasColumnType("int");

                    b.Property<bool>("Smoker")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CreatedById");

                    b.ToTable("ContactAudit");
                });

            modelBuilder.Entity("Data.App.Models.Documents.Document", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("DocumentId");

                    b.HasIndex("UploadedById");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Data.App.Models.Documents.DocumentAccessHistory", b =>
                {
                    b.Property<string>("DocumentAccessHistoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessedById")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateAccessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("DocumentAccessHistoryId");

                    b.HasIndex("AccessedById");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentAccessHistory");
                });

            modelBuilder.Entity("Data.App.Models.Farms.Farm", b =>
                {
                    b.Property<string>("FarmId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("FarmId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Farm");
                });

            modelBuilder.Entity("Data.App.Models.FileUploads.FileUpload", b =>
                {
                    b.Property<string>("FileUploadId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentDisposition")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("FileUploadId");

                    b.ToTable("FileUpload");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.Bloodline", b =>
                {
                    b.Property<string>("BloodlineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("BloodlineId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Bloodline");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.Rabbit", b =>
                {
                    b.Property<string>("RabbitId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BreedingId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CageId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("FarmId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<float>("FertilityRate")
                        .HasColumnType("real");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PrimaryImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RabbitId");

                    b.HasIndex("BreedingId");

                    b.HasIndex("CageId");

                    b.HasIndex("FarmId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Rabbit");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.RabbitBloodline", b =>
                {
                    b.Property<string>("RabbitBloodlineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("BloodlineId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<string>("RabbitId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("RabbitBloodlineId");

                    b.HasIndex("BloodlineId");

                    b.HasIndex("RabbitId", "BloodlineId")
                        .IsUnique();

                    b.ToTable("RabbitBloodline");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.RabbitImage", b =>
                {
                    b.Property<string>("RabbitImageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RabbitId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("RabbitImageId");

                    b.HasIndex("ImageId");

                    b.HasIndex("RabbitId", "ImageId")
                        .IsUnique();

                    b.ToTable("RabbitImage");
                });

            modelBuilder.Entity("Data.App.Models.Seasons.Season", b =>
                {
                    b.Property<string>("SeasonId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SeasonId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Season");
                });

            modelBuilder.Entity("Data.App.Models.Teams.Team", b =>
                {
                    b.Property<string>("TeamId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("TeamId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Data.App.Models.Teams.TeamMember", b =>
                {
                    b.Property<string>("TeamId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("MemberId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("TeamId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("Data.App.Models.Users.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Data.App.Models.Users.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId");

                    b.HasIndex("ImageId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTask", b =>
                {
                    b.Property<string>("UserTaskId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateActualCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserTaskId");

                    b.HasIndex("ContactId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTask");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTaskAudit", b =>
                {
                    b.Property<string>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AuditAction")
                        .HasColumnType("int");

                    b.Property<string>("AuditUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateActualCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLog")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("AuditId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EntityId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTaskAudit");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTaskItem", b =>
                {
                    b.Property<string>("UserTaskItemId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("UserTaskId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserTaskItemId");

                    b.HasIndex("UserTaskId");

                    b.ToTable("UserTaskItem");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTaskItemAudit", b =>
                {
                    b.Property<string>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AuditAction")
                        .HasColumnType("int");

                    b.Property<string>("AuditUserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLog")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserTaskId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("AuditId");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("EntityId");

                    b.HasIndex("UserTaskId");

                    b.ToTable("UserTaskItemAudit");
                });

            modelBuilder.Entity("Data.App.Models.Activities.Activity", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Breedings.Breeding", b =>
                {
                    b.HasOne("Data.App.Models.Cages.Cage", "Cage")
                        .WithMany("Breedings")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Farms.Farm", "Farm")
                        .WithMany("Breedings")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Seasons.Season", "Season")
                        .WithMany("Breedings")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cage");

                    b.Navigation("Farm");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Data.App.Models.Breedings.BreedingMortality", b =>
                {
                    b.HasOne("Data.App.Models.Breedings.Breeding", "Breeding")
                        .WithMany("BreedingMortalities")
                        .HasForeignKey("BreedingId");

                    b.Navigation("Breeding");
                });

            modelBuilder.Entity("Data.App.Models.Breedings.BreedingParent", b =>
                {
                    b.HasOne("Data.App.Models.Breedings.Breeding", "Breeding")
                        .WithMany("Parents")
                        .HasForeignKey("BreedingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Rabbits.Rabbit", "Rabbit")
                        .WithMany("OwnedBreedings")
                        .HasForeignKey("RabbitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breeding");

                    b.Navigation("Rabbit");
                });

            modelBuilder.Entity("Data.App.Models.Cages.Cage", b =>
                {
                    b.HasOne("Data.App.Models.Farms.Farm", "Farm")
                        .WithMany("Cages")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatMessage", b =>
                {
                    b.HasOne("Data.App.Models.Chats.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatReceiver", b =>
                {
                    b.HasOne("Data.App.Models.Chats.Chat", "Chat")
                        .WithMany("Receivers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Chats.ChatMessage", "LastChatMessage")
                        .WithMany("Receivers")
                        .HasForeignKey("LastChatMessageId");

                    b.HasOne("Data.App.Models.Users.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("LastChatMessage");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.Contact", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Data.App.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactActivity", b =>
                {
                    b.HasOne("Data.App.Models.Activities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Contacts.Contact", "Contact")
                        .WithMany("Activities")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactAttachment", b =>
                {
                    b.HasOne("Data.App.Models.Contacts.Contact", "Contact")
                        .WithMany("Attachments")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.FileUploads.FileUpload", "FileUpload")
                        .WithMany()
                        .HasForeignKey("FileUploadId");

                    b.Navigation("Contact");

                    b.Navigation("FileUpload");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactAttachmentAudit", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId");

                    b.HasOne("Data.App.Models.Contacts.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Data.App.Models.Contacts.ContactAttachment", "Entity")
                        .WithMany("Audit")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.FileUploads.FileUpload", "FileUpload")
                        .WithMany()
                        .HasForeignKey("FileUploadId");

                    b.Navigation("AuditUser");

                    b.Navigation("Contact");

                    b.Navigation("Entity");

                    b.Navigation("FileUpload");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactAudit", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Data.App.Models.Users.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId");

                    b.HasOne("Data.App.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("AssignedTo");

                    b.Navigation("AuditUser");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Data.App.Models.Documents.Document", b =>
                {
                    b.HasOne("Data.App.Models.FileUploads.FileUpload", "FileUpload")
                        .WithOne()
                        .HasForeignKey("Data.App.Models.Documents.Document", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUpload");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Data.App.Models.Documents.DocumentAccessHistory", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "AccessedBy")
                        .WithMany()
                        .HasForeignKey("AccessedById");

                    b.HasOne("Data.App.Models.Documents.Document", "Document")
                        .WithMany("DocumentAccessHistories")
                        .HasForeignKey("DocumentId");

                    b.Navigation("AccessedBy");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.Rabbit", b =>
                {
                    b.HasOne("Data.App.Models.Breedings.Breeding", "Breeding")
                        .WithMany("Children")
                        .HasForeignKey("BreedingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.App.Models.Cages.Cage", "Cage")
                        .WithMany()
                        .HasForeignKey("CageId");

                    b.HasOne("Data.App.Models.Farms.Farm", "Farm")
                        .WithMany("Rabbits")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breeding");

                    b.Navigation("Cage");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.RabbitBloodline", b =>
                {
                    b.HasOne("Data.App.Models.Rabbits.Bloodline", "Bloodline")
                        .WithMany("RabbitBloodlines")
                        .HasForeignKey("BloodlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Rabbits.Rabbit", "Rabbit")
                        .WithMany("Bloodlines")
                        .HasForeignKey("RabbitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bloodline");

                    b.Navigation("Rabbit");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.RabbitImage", b =>
                {
                    b.HasOne("Data.App.Models.FileUploads.FileUpload", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Rabbits.Rabbit", "Rabbit")
                        .WithMany("RabbitImages")
                        .HasForeignKey("RabbitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Rabbit");
                });

            modelBuilder.Entity("Data.App.Models.Teams.Team", b =>
                {
                    b.HasOne("Data.App.Models.Chats.Chat", "Chat")
                        .WithOne()
                        .HasForeignKey("Data.App.Models.Teams.Team", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Data.App.Models.Teams.TeamMember", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "Member")
                        .WithMany("TeamMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Teams.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Data.App.Models.Users.User", b =>
                {
                    b.HasOne("Data.App.Models.FileUploads.FileUpload", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserRole", b =>
                {
                    b.HasOne("Data.App.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTask", b =>
                {
                    b.HasOne("Data.App.Models.Contacts.Contact", "Contact")
                        .WithMany("Tasks")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId");

                    b.Navigation("Contact");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTaskAudit", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId");

                    b.HasOne("Data.App.Models.Contacts.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Data.App.Models.Users.UserTasks.UserTask", "Entity")
                        .WithMany("Audit")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AuditUser");

                    b.Navigation("Contact");

                    b.Navigation("Entity");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTaskItem", b =>
                {
                    b.HasOne("Data.App.Models.Users.UserTasks.UserTask", "UserTask")
                        .WithMany("UserTaskItems")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTaskItemAudit", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId");

                    b.HasOne("Data.App.Models.Users.UserTasks.UserTaskItem", "Entity")
                        .WithMany("Audit")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.UserTasks.UserTask", "UserTask")
                        .WithMany()
                        .HasForeignKey("UserTaskId");

                    b.Navigation("AuditUser");

                    b.Navigation("Entity");

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("Data.App.Models.Breedings.Breeding", b =>
                {
                    b.Navigation("BreedingMortalities");

                    b.Navigation("Children");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("Data.App.Models.Cages.Cage", b =>
                {
                    b.Navigation("Breedings");
                });

            modelBuilder.Entity("Data.App.Models.Chats.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatMessage", b =>
                {
                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.Contact", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Attachments");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Data.App.Models.Contacts.ContactAttachment", b =>
                {
                    b.Navigation("Audit");
                });

            modelBuilder.Entity("Data.App.Models.Documents.Document", b =>
                {
                    b.Navigation("DocumentAccessHistories");
                });

            modelBuilder.Entity("Data.App.Models.Farms.Farm", b =>
                {
                    b.Navigation("Breedings");

                    b.Navigation("Cages");

                    b.Navigation("Rabbits");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.Bloodline", b =>
                {
                    b.Navigation("RabbitBloodlines");
                });

            modelBuilder.Entity("Data.App.Models.Rabbits.Rabbit", b =>
                {
                    b.Navigation("Bloodlines");

                    b.Navigation("OwnedBreedings");

                    b.Navigation("RabbitImages");
                });

            modelBuilder.Entity("Data.App.Models.Seasons.Season", b =>
                {
                    b.Navigation("Breedings");
                });

            modelBuilder.Entity("Data.App.Models.Teams.Team", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Data.App.Models.Users.User", b =>
                {
                    b.Navigation("TeamMembers");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTask", b =>
                {
                    b.Navigation("Audit");

                    b.Navigation("UserTaskItems");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTasks.UserTaskItem", b =>
                {
                    b.Navigation("Audit");
                });
#pragma warning restore 612, 618
        }
    }
}
