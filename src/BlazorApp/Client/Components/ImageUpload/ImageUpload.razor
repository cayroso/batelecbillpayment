@using System.Net.Http.Headers

@inject HttpClient Http

<InputFile OnChange="@HandleSelected" multiple />
@if (ImgUrl != null)
{
    <div>
        <img src="@ImgUrl" style="width:300px" />
    </div>
}

@code {
    [Parameter]
    public string ImgUrl { get; set; }
    [Parameter]
    public EventCallback<string> OnChange { get; set; }
    //[Inject]
    //public IProductHttpRepository Repository { get; set; }
    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var imageFile in imageFiles)
        {
            if (imageFile != null)
            {
                var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);

                using (var ms = resizedFile.OpenReadStream(resizedFile.Size))
                {
                    var content = new MultipartFormDataContent();
                    content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
                    content.Add(new StreamContent(ms, Convert.ToInt32(resizedFile.Size)), "image", imageFile.Name);
                    ImgUrl = await UploadProductImage(content);
                    await OnChange.InvokeAsync(ImgUrl);
                }
            }
        }
    }

    public async Task<string> UploadProductImage(MultipartFormDataContent content)
    {
        var postResult = await Http.PostAsync("/api/fileupload", content);
        var postContent = await postResult.Content.ReadAsStringAsync();
        if (!postResult.IsSuccessStatusCode)
        {
            throw new ApplicationException(postContent);
        }
        else
        {
            var imgUrl = Path.Combine("https://localhost:7104/", postContent);
            return imgUrl;
        }
    }
}
