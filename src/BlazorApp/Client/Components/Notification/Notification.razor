@using BlazorApp.Client.Components.Toaster
@using Microsoft.AspNetCore.SignalR.Client
@using global::App.Hubs
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="visually-hidden">
    <h3>Notification</h3>


    <div class="form-group">
        <label>
            User:
            <input @bind="userInput" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

    <hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</div>

@code {
    [Inject] private ToasterService? _toasterService { get; set; }
    private ToasterService toasterService => _toasterService!;

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"))
            .Build();

        hubConnection.On<string, string>("OnMessageReceived", (user, message) =>
        {
            toasterService.AddToast(Toast.NewToast($"New Message from {user}", message, MessageColour.Success, 10));

            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<NotificationResponse>("OnNotificationCreated", (resp) =>
        {
            toasterService.AddToast(Toast.NewToast(resp.Subject, resp.Content, MessageColour.Info, 10));

            //var encodedMsg = notification.Content;
            //messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
