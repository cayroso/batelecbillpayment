@page "/administrator/announcements"
@attribute [Authorize]

@using BlazorApp.Client.Components.Toaster
@using BlazorApp.Shared.Announcements

@attribute [Authorize(Roles = "Administrator")]

@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Announcements</PageTitle>

<div class="row">
    <div class="col">
        <h3>Announcements</h3>
    </div>
    <div class="col-auto">
        <button class="btn btn-secondary" @onclick="@(async ()=> await GetItems())">
            <i class="oi oi-reload"></i>
            Refresh
        </button>
        <a href="/administrator/announcements/add" class="btn btn-primary">
            <i class="oi oi-plus me-1"></i>Add
        </a>
    </div>
</div>

<div class="table-responsive pt-1">

    <table class="table table-bordered">
        <thead>
            <tr class="table-primary">
                <th>Subject</th>
                <th>Content</th>
                <th>Date</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                <tr>
                    <td>
                        @item.Subject
                    </td>
                    <td>
                        @item.Content
                    </td>
                    <td>
                        @item.DateCreated.ToLocalTime()
                    </td>
                    <td>
                        <button @onclick="@(async ()=> await DeleteItem(item.AnnouncementId))" class="btn btn-sm btn-warning">
                            <i class="oi oi-trash"></i>
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Inject] private ToasterService? _toasterService { get; set; }
    private ToasterService toasterService => _toasterService!;

    List<ViewAnnouncementInfo> Items = new List<ViewAnnouncementInfo>();

    protected override async Task OnInitializedAsync()
    {
        await GetItems();
    }

    async Task GetItems()
    {
        var items = await Http.GetFromJsonAsync<List<ViewAnnouncementInfo>>("/api/announcement/");

        Items = items;
    }

    async Task DeleteItem(string id)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the announcement?"))
            return;

        var result = await Http.DeleteAsync($"/api/announcement/{id}/delete");

        if (!result.IsSuccessStatusCode)
        {
            var error = await result.Content.ReadAsStringAsync();

            toasterService.AddToast(Toast.NewToast("Unhandled Error", error, MessageColour.Danger, 10));
            return;
        }

        toasterService.AddToast(Toast.NewToast("Delete Announcement", "Announcement successfully deleted.", MessageColour.Warning, 10));

        await GetItems();
    }
}
