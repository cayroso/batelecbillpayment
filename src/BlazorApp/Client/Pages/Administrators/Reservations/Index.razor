@page "/administrator/reservations"
@using BlazorApp.Client.Components.Toaster
@using BlazorApp.Shared.Reservations

@attribute [Authorize]

@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Reservations</PageTitle>

<div class="row">
    <div class="col">
        <h3>Reservations</h3>
    </div>
    <div class="col-auto">
        <button class="btn btn-secondary" @onclick="@(async ()=> await GetMyReservations())">
            <i class="oi oi-reload"></i>
            Refresh
        </button>
    </div>
</div>

<div class="table-responsive pt-1">
    <table class="table table-bordered">
        <thead>
            <tr class="table-primary">
                <th>Date of Reservation</th>
                <th>Branch Name</th>
                <th>Account</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items.OrderByDescending(e => e.DateReservation))
            {
                <tr>
                    <td>
                        @item.DateReservation
                    </td>
                    <td>
                        @item.BranchName
                    </td>
                    <td>
                        @item.AccountName
                    </td>
                    <td>
                        <button @onclick="@(async ()=> await DeleteReservation(item.ReservationId))" class="btn btn-sm btn-warning">
                            <i class="oi oi-trash"></i>
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Inject] private ToasterService? _toasterService { get; set; }
    private ToasterService toasterService => _toasterService!;

    List<ReservationInfo> Items = new List<ReservationInfo>();

    protected override async Task OnInitializedAsync()
    {
        await GetMyReservations();
    }

    async Task GetMyReservations()
    {
        var items = await Http.GetFromJsonAsync<List<ReservationInfo>>("/api/reservation");

        Items = items;
    }

    async Task DeleteReservation(string reservationId)
    {
        var prompt = await JSRuntime.InvokeAsync<string>("prompt", "Enter reason for deleting this reservation?");

        if (string.IsNullOrWhiteSpace(prompt))
            //if (!await JSRuntime.InvokeAsync<bool>("prompt", "Are you sure you want to delete the reservation?"))
            return;

        var result = await Http.DeleteAsync($"/api/reservation/{reservationId}/{prompt}");

        if (!result.IsSuccessStatusCode)
        {
            var error = await result.Content.ReadAsStringAsync();
            return;
        }

        toasterService.AddToast(Toast.NewToast("Delete Reservation", "Reservation successfully deleted.", MessageColour.Warning, 10));

        await GetMyReservations();
    }
}
