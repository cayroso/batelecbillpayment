@page "/consumer/reservations/add"

@using BlazorApp.Client.Components.Toaster
@using BlazorApp.Shared.Branches
@using BlazorApp.Shared.Reservations
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager navigationManager

<PageTitle>Add Reservation</PageTitle>
<h3>Add Reservation</h3>

<EditForm OnValidSubmit="OnSubmit" Model="Parameters">

    <DataAnnotationsValidator />

    <div class="container">
        <div class="row">
            <div class="col-lg-6">
                <div class="form-floating mb-3">
                    <input id="dateReservation" type="date" class="form-control" @bind-value="Parameters.DateReservation" placeholder="Reservation Date" />
                    <label for="dateReservation">Reservation Date</label>
                    <ValidationMessage For="@(() => Parameters.DateReservation)" />
                </div>

                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="TimeSlot" class="form-select" id="timeSlot">
                        <option value=""></option>
                        @foreach (var opt in TimeSlots)
                        {
                            <option value="@opt">@opt</option>
                        }
                    </InputSelect>
                    <label for="timeSlot">Time Slot</label>
                    <ValidationMessage For="@(() => TimeSlot)" />
                </div>

                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Parameters.BranchId" class="form-control" id="branchId">
                        <option value=""></option>
                        @foreach (var opt in Branches.OrderBy(e => e.Name))
                        {
                            <option value="@opt.BranchId">@opt.Name</option>
                        }
                    </InputSelect>
                    <label for="branchId">Branch</label>
                    <ValidationMessage For="@(() => Parameters.BranchId)" />
                </div>


                <div class="">
                    <button class="btn btn-primary" type="submit">Save</button>
                    <a href="/consumer/reservations" class="btn btn-outline-secondary">Cancel</a>
                </div>
            </div>
        </div>

    </div>

    <label class="text-danger">@error</label>



</EditForm>

@code {
    [Inject] private ToasterService? _toasterService { get; set; }
    private ToasterService toasterService => _toasterService!;

    AddReservationInfo Parameters { get; set; } = new AddReservationInfo();
    string error { get; set; }

    List<BranchInfo> Branches = new List<BranchInfo>();

    List<string> TimeSlots = new List<string>();

    [Required]
    public string TimeSlot { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Parameters.DateReservation = DateTime.UtcNow;

        var items = await Http.GetFromJsonAsync<List<BranchInfo>>("/api/branch/lookup");

        Branches = items;

        var now = DateTime.Now.Date.AddHours(9);
        var end = now.AddHours(8);

        for (; now < end; now = now.AddMinutes(15))
        {
            TimeSlots.Add(now.ToString("hh:mm tt"));
        }

        //await GetOpenTimeSlots();
    }


    async Task OnSubmit()
    {
        error = null;
        try
        {
            var ts = DateTime.Parse(TimeSlot);

            var dateReservation = Parameters.DateReservation.Date.AddHours(ts.Hour).AddMinutes(ts.Minute);
            dateReservation = DateTime.SpecifyKind(dateReservation, DateTimeKind.Local);

            Parameters.DateReservation = dateReservation;

            var result = await Http.PostAsJsonAsync<AddReservationInfo>("/api/reservation", Parameters);

            if (!result.IsSuccessStatusCode)
            {
                error = await result.Content.ReadAsStringAsync();

                return;
            }

            toasterService.AddToast(Toast.NewToast("Create Reservation", "Reservation successfully created.", MessageColour.Success, 10));

            navigationManager.NavigateTo("/consumer/reservations");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
